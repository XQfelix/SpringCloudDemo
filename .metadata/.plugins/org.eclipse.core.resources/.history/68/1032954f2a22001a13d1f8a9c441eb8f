package com.could.fegin.two;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
import org.springframework.core.ParameterNameDiscoverer;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
 
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.Proxy;
import java.net.URLEncoder;
 
public class HddEurekaHandler implements InvocationHandler {
    private static final Logger logger = LoggerFactory.getLogger(HddEurekaHandler.class);
 
    /**
     * 代理的目标接口类
     */
    private Class<?> target;
 
    /**
     * Eureka中定义的Service的名称
     */
    private String serviceName;
 
    private HddHttpEurekaClient client;
 
    HddEurekaHandler(HddHttpEurekaClient client) {
        this.client = client;
    }
 
    public <T> T create(Class<T> target) {
        this.target = target;
        FeignClient s = target.getAnnotation(FeignClient.class);
        if (s != null) {
            serviceName = s.value().toUpperCase();
            if (serviceName.length() == 0) {
                serviceName = s.name().toUpperCase();
            }
            if (serviceName.length() == 0) {
                logger.error(target.getName() + ", 定义的 @FeignClient 中没有指定Service Name！");
                return null;
            }
            return (T) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class<?>[]{target}, this);
        } else {
            logger.error(target.getName() + ",没有定义 @FeignClient！");
            return null;
        }
    }
 
    /**
     * 函数的实现内容，可以使用用其他的方式实现，例如通信等。
     */
    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        RequestMapping requestMapping = method.getAnnotation(RequestMapping.class);
        String[] values = requestMapping.value();
        String value;
        if (values.length > 0) {
            value = values[0];
        } else {
            logger.error(target.getName() + "." + method.getName() +
                    ",没有定义 @RequestMapping！或者@RequestMapping的值为空");
            return null;
        }
        RequestMethod[] requestMethods = requestMapping.method();
        HttpMethod httpMethod = confirmHttpMethod(requestMethods);
        if (httpMethod == null) {
            logger.error(target.getName() + "." + method.getName() +
                    ",没有定义 @RequestMapping！或者@RequestMapping的Http请求类型为空");
            return null;
        }
 
        Class<?> returnClaz = method.getReturnType();
        if (args.length == 1 && args[0] instanceof MultiValueMap) {
            HttpEntity<?> entity = new HttpEntity<MultiValueMap<String, Object>>(
                    (MultiValueMap<String, Object>) args[0]);
            return client.request(serviceName, value, httpMethod, entity, returnClaz);
        }
 
        // 判断是否把参数作为RequestBody传输
        Annotation[][] annotations = method.getParameterAnnotations();
        if (annotations[0][0] instanceof RequestBody) {
            if (args.length == 1) {
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);
                HttpEntity<?> entity = new HttpEntity<>(args[0], headers);
                return client.request(serviceName, value, httpMethod, entity, returnClaz);
            } else {
                logger.error(target.getName() + "." + method.getName() +
                        ",定义了错误的参数注解！");
                return null;
            }
        }
 
        // 判断参数为
        String body = parseRequestParam(method, args);
 
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        HttpEntity entity = new HttpEntity(body, headers);
        return client.request(serviceName, value, httpMethod, entity, returnClaz);
    }
 
    /**
     *
     * @param requestMethods
     * @return
     */
    protected HttpMethod confirmHttpMethod(RequestMethod[] requestMethods) {
        for (int i = 0; i < requestMethods.length; i++) {
            if (RequestMethod.POST == requestMethods[i]) {
                return HttpMethod.POST;
            } else if (RequestMethod.GET == requestMethods[i]) {
                return HttpMethod.GET;
            }
        }
        return null;
    }
 
    /**
     * 根据方法传入的参数，通过获取注解的方式，组装参数列表数据
     * @param method
     * @param args
     * @return
     */
    protected String parseRequestParam(Method method, Object[] args) {
        StringBuilder builder = new StringBuilder();
        Annotation[][] annotations = method.getParameterAnnotations();
        int j = 0;
        for (int i = 0; i < annotations.length; i++) {
            Annotation annotation = annotations[i][0];
            if (annotation instanceof RequestParam) {
                RequestParam param = (RequestParam) annotation;
                if (j > 0) {
                    builder.append("&");
                }
                builder.append(param.value());
                builder.append("=");
                if (args[i] instanceof String) {
                    try {
                        builder.append(URLEncoder.encode((String) args[i], "UTF-8"));
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                } else {
                    builder.append(args[i]);
                }
                j++;
            }
        }
        return builder.toString();
    }
 
}
